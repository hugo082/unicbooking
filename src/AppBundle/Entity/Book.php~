<?php

namespace AppBundle\Entity;

use AppBundle\Model\Book as BaseBook;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
* Book
*
* @ORM\Table(name="book")
* @ORM\Entity(repositoryClass="AppBundle\Repository\BookRepository")
*/
class Book
{
    /**
    * @var int
    *
    * @ORM\Column(name="id", type="integer")
    * @ORM\Id
    * @ORM\GeneratedValue(strategy="AUTO")
    */
    private $id;

    /**
    * @var string
    *
    * @ORM\Column(name="airport", type="string", length=255)
    */
    protected $airport;

    /**
    * @var \DateTime
    *
    * @ORM\Column(name="date", type="date")
    * @Assert\Range(
    *      min = "now",
    *      minMessage = "date.min.now"
    * )
    */
    protected $date;

    /**
    * @var \Date
    *
    * @ORM\Column(name="creation_date", type="date")
    */
    protected $creationdate;

    /**
    * @var string
    *
    * @ORM\Column(name="service", type="string", length=255, nullable=false)
    */
    protected $service;

    /**
    * @var Product
    * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Product")
    * @ORM\JoinColumn(nullable=false)
    */
    protected $product;

    /**
    * @var Flight
    * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Flight")
    * @ORM\JoinColumn(nullable=false)
    */
    protected $flight;

    /**
    * @var array
    * Adult Customer
    * @ORM\Column(name="adultcus", type="integer")
    * @Assert\Range(
    *      min = 0
    * )
    */
    protected $adultcus;

    /**
    * @var array
    * Child Customer
    * @ORM\Column(name="childcus", type="integer")
    * @Assert\Range(
    *      min = 0
    * )
    */
    protected $childcus;

    /**
    * @var string
    *
    * @ORM\Column(name="nameboard", type="string", length=255, nullable=true)
    */
    protected $nameboard;

    /**
    * @var int
    *
    * @ORM\Column(name="bags", type="integer")
    * @Assert\Range(
    *      min = 0
    * )
    */
    protected $bags;

    /**
    * @var string
    *
    * @ORM\Column(name="agent_firstname", type="string", length=255)
    */
    protected $agentfirstname;

    /**
    * @var string
    *
    * @ORM\Column(name="agent_lastname", type="string", length=255)
    */
    protected $agentlastname;

    /**
    * @var string
    *
    * @ORM\Column(name="agent_email", type="string", length=255)
    */
    protected $agentemail;

    /**
    * @var int
    *
    * @ORM\Column(name="price", type="integer")
    * @Assert\Range(
    *      min = 0
    * )
    */
    protected $price;

    /**
    * @var string
    *
    * @ORM\Column(name="timepu", type="string", length=255, nullable=true)
    */
    protected $timepu;

    /**
    * @var string
    *
    * @ORM\Column(name="addresspu", type="string", length=255, nullable=true)
    */
    protected $addresspu;

    /**
    * @var string
    *
    * @ORM\Column(name="addressdo", type="string", length=255, nullable=true)
    */
    protected $addressdo;

    /**
    * @var text
    * @ORM\Column(name="note", type="text", nullable=true)
    */
    protected $note;

    /**
    * @var string
    *
    * @ORM\Column(name="state", type="string", length=255, nullable=false)
    */
    protected $state;

    /**
    * @var User
    * @ORM\ManyToOne(targetEntity="AppBundle\Entity\User", inversedBy="books", cascade={"remove"})
    * @ORM\JoinColumn(nullable=false)
    */
    protected $user;

    /**
    * @var boolean
    *
    * @ORM\Column(name="enabled", type="boolean")
    */
    protected $enabled;

    /**
    * @var User
    * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Employee")
    * @ORM\JoinColumn(nullable=true)
    */
    protected $driver;

    /**
    * @var User
    * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Employee")
    * @ORM\JoinColumn(nullable=true)
    */
    protected $greeter;

    /**
    * @ORM\OneToMany(targetEntity="AppBundle\Entity\Customer", mappedBy="book", cascade={"persist"})
    */
    protected $customers;

    /**
    * Constructor
    */
    public function __construct()
    {
        $this->creationdate = new \DateTime();
        $this->state = "WAITING";
        $this->customers = new \Doctrine\Common\Collections\ArrayCollection();
        $this->enabled = false;
    }

    /**
    * Add $value at book.price
    */
    public function addToPrice($value) {
        $this->price += $value;
        return $this;
    }
}
